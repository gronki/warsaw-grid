@import "respond";

// this can be changed to any values that suit you
$gutter:    3%;
$grid-base: 12;

// this should never be used! internal helper
@mixin column-base($g) {
    @if $g > $grid-base {
        $g: $grid-base;
    }
    width: percentage($g / $grid-base) - $gutter;
}

// this causes the given div to behave like a column of width $g
// starting from size $bp. to force column on all sizes, use "all"
@mixin column($bp,$g) {
    display: block;
    float: left;
    width: 100% - $gutter;
    margin: 0px $gutter / 2;
    @if $bp == all {
        @include column-base($g);
    } @else {
        @include breakpoint($bp) {
            @include column-base($g);
        }
    }
}

div.container {
    /* the container class wraps all the content, centers it and gives it size */
    display: block;
    box-sizing: border-box;
    border: none;
    margin: 0px $gutter/2;
    @include breakpoint(md) {
        /* starting from medium size, auto-center */
        margin: 0px auto;
    }
    @for $i from 2 through length($sizes) {
        $sz: nth($sizes,$i);
        $bp: nth($brkpnt,$i);
        @include breakpoint($sz) {
            max-width: $bp * 0.97;
        }
    }
    padding: 0px;
    div.row {
        box-sizing: border-box;
        display: block;
        border: none;
        margin-top: $gutter / 2;
        margin-bottom: $gutter / 2;
        /* negative margins allow us to keep margins consistent in nested columns
           and also with content not wrapped in rows/columns */
        margin-left: -$gutter/2 !important;
        margin-right: -$gutter/2  !important;
        div.col {
            display: block;
            box-sizing: border-box;
            border: none;
            float: left;
            margin: 0px $gutter / 2;
            /* by default, the column has 100% width (minus gutter) */
            width: 100% - $gutter;
        }
        @for $i from 1 through $grid-base {
            div.col-#{$i} {
                @extend div.col;
                @include column-base($i);
            }
        }

        @for $j from 1 through length($sizes) {
            $bp: nth($sizes,$j);
            @for $i from 1 through $grid-base {
                div.col-#{$bp}-#{$i} {
                    @extend div.col;
                }
            }
            @include breakpoint($bp) {
                @for $i from 1 through $grid-base {
                    div.col-#{$bp}-#{$i} {
                        @include column-base($i);
                    }
                }
            }
        }
        // This will generate classes that respond only to given size.
        // Uncomment if needed.
        // @for $j from 1 through length($sizes) {
        //     $bp: nth($sizes,$j);
        //     @for $i from 1 through $grid-base {
        //         div.col-#{$bp}-only-#{$i} {
        //             @extend div.col;
        //         }
        //     }
        //     @include respond($bp) {
        //         @for $i from 1 through $grid-base {
        //             div.col-#{$bp}-only-#{$i} {
        //                 @include column-base($i);
        //             }
        //         }
        //     }
        // }

        &::after {
            /* "the clear fix" */
            content: "";
            display: table;
            border: none;
            height: 0px;
            width: 0px;
            margin: 0px;
            padding: 0px;
            clear: both;
        }
    }
}
